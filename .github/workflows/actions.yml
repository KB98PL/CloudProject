name: Actions
on: [push]
jobs:
  Tests:
    runs-on: ubuntu-latest
    steps:
    
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."

#   Build-frontend:
#     needs:  Tests
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - run: |
#          cd front_angular
#          sudo npm install --progress=false
#          sudo npm run build
#       - name: Archive
#         uses: actions/upload-artifact@v2
#         with:
#           name: dist
#           path: |
#            front_angular/dist
     
  Build-backend:
    needs:  Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run : composer update --ignore-platform-reqs
      - name: Archive
        uses: actions/upload-artifact@v2
        with:
          name: composer
          path: |
           composer.lock

  Deploy: 
    needs:  [Build-backend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
      -  run : sudo apt update -qy
      -  run : sudo apt install -y ruby-dev
      -  run : sudo gem install dpl

    # Prepare files for deployment
      -  run : mkdir -p build/public/
      -  run : cp -r web_api build/public/
      -  run : cp -rT dist/wypozyczalnia-angular build/public/
      -  run : cp .htaccess build/public
      -  run : ls -la composer
      -  run : cp composer.json composer/composer.lock build/
      -  run : cp Procfile build/

    # Push to Heroku
      -  run : cd build
      -  run : |  
          sudo dpl --provider=heroku --app=${{ secrets.APP_NAME }} --api-key=${{ secrets.API_KEY }} --skip_cleanup

